-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- hex inverter
entity n7404 is
  port (
    n1A: in std_logic;
    n2A: in std_logic;
    n3A: in std_logic;
    n4A: in std_logic;
    n5A: in std_logic;
    n6A: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    n1Y: out std_logic;
    n2Y: out std_logic;
    n3Y: out std_logic;
    n4Y: out std_logic;
    n5Y: out std_logic;
    n6Y: out std_logic);
end n7404;

architecture Behavioral of n7404 is
begin
  n1Y <= NOT n1A;
  n2Y <= NOT n2A;
  n3Y <= NOT n3A;
  n4Y <= NOT n4A;
  n5Y <= NOT n5A;
  n6Y <= NOT n6A;
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_JK_FF_AS is
  generic (Default : std_logic);  
  port (
    Q: out std_logic;
    notQ: out std_logic;
    Set: in std_logic;
    J: in std_logic;
    C: in std_logic;
    K: in std_logic;
    Clr: in std_logic );
end DIG_JK_FF_AS;

architecture Behavioral of DIG_JK_FF_AS is
  signal state: std_logic := Default;
begin
    process (C, Clr, Set)
    begin
        if (Set='1') then
            state <= '1';
        elsif (Clr='1') then
            state <= '0';
        elsif rising_edge(C) then
          if (J='0' and K='1') then
             state <= '0';
          elsif (J='1' and K='0') then
             state <= '1';
          elsif (J='1' and K='1') then
             state <= not (state);
          end if;
        end if;
    end process;

    Q <= state;
    notQ <= NOT( state );
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- Presettable synchronous 4-bit binary up/down counter
entity n74191 is
  port (
    D0: in std_logic;
    notPL: in std_logic;
    notUnotD: in std_logic;
    CP: in std_logic;
    notCE: in std_logic;
    D1: in std_logic;
    D2: in std_logic;
    D3: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    Q0: out std_logic;
    Q1: out std_logic;
    Q2: out std_logic;
    Q3: out std_logic;
    TC: out std_logic;
    notRC: out std_logic);
end n74191;

architecture Behavioral of n74191 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal Q0_temp: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal Q1_temp: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
  signal Q2_temp: std_logic;
  signal s11: std_logic;
  signal s12: std_logic;
  signal s13: std_logic;
  signal s14: std_logic;
  signal Q3_temp: std_logic;
  signal s15: std_logic;
  signal s16: std_logic;
  signal s17: std_logic;
  signal TC_temp: std_logic;
  signal s18: std_logic;
begin
  s1 <= NOT notCE;
  s18 <= NOT notPL;
  s4 <= (D1 AND s18);
  s0 <= (D0 AND s18);
  s8 <= (D2 AND s18);
  s12 <= (D3 AND s18);
  s16 <= (notUnotD AND s1);
  s17 <= (s1 AND NOT notUnotD);
  s6 <= (NOT s4 AND s18);
  s2 <= (NOT s0 AND s18);
  s10 <= (NOT s8 AND s18);
  s14 <= (NOT s12 AND s18);
  gate0: entity work.DIG_JK_FF_AS
    generic map (
      Default => '0')
    port map (
      Set => s0,
      J => s1,
      C => CP,
      K => s1,
      Clr => s2,
      Q => Q0_temp,
      notQ => s3);
  s5 <= ((s16 AND s3) OR (Q0_temp AND s17));
  gate1: entity work.DIG_JK_FF_AS
    generic map (
      Default => '0')
    port map (
      Set => s4,
      J => s5,
      C => CP,
      K => s5,
      Clr => s6,
      Q => Q1_temp,
      notQ => s7);
  s9 <= ((s16 AND s3 AND s7) OR (Q0_temp AND Q1_temp AND s17));
  gate2: entity work.DIG_JK_FF_AS
    generic map (
      Default => '0')
    port map (
      Set => s8,
      J => s9,
      C => CP,
      K => s9,
      Clr => s10,
      Q => Q2_temp,
      notQ => s11);
  s13 <= ((s16 AND s3 AND s7 AND s11) OR (Q0_temp AND Q1_temp AND Q2_temp AND s17));
  gate3: entity work.DIG_JK_FF_AS
    generic map (
      Default => '0')
    port map (
      Set => s12,
      J => s13,
      C => CP,
      K => s13,
      Clr => s14,
      Q => Q3_temp,
      notQ => s15);
  TC_temp <= ((NOT notUnotD AND Q1_temp AND Q0_temp AND Q2_temp AND Q3_temp) OR (notUnotD AND s3 AND s7 AND s11 AND s15));
  notRC <= NOT (NOT CP AND s1 AND TC_temp);
  Q0 <= Q0_temp;
  Q1 <= Q1_temp;
  Q2 <= Q2_temp;
  Q3 <= Q3_temp;
  TC <= TC_temp;
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- 4-bit comparator
entity n7485 is
  port (
    PleQ_i: in std_logic;
    PeqQ_i: in std_logic;
    PgrQ_i: in std_logic;
    P_0: in std_logic;
    P_1: in std_logic;
    P_2: in std_logic;
    P_3: in std_logic;
    Q_0: in std_logic;
    Q_1: in std_logic;
    Q_2: in std_logic;
    Q_3: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    PleQ: out std_logic;
    PeqQ: out std_logic;
    PgrQ: out std_logic);
end n7485;

architecture Behavioral of n7485 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
begin
  s0 <= NOT (P_0 AND Q_0);
  s2 <= NOT (P_1 AND Q_1);
  s4 <= NOT (P_2 AND Q_2);
  s6 <= NOT (P_3 AND Q_3);
  s1 <= NOT ((P_0 AND s0) OR (s0 AND Q_0));
  s3 <= NOT ((P_1 AND s2) OR (s2 AND Q_1));
  s5 <= NOT ((P_2 AND s4) OR (s4 AND Q_2));
  s7 <= NOT ((P_3 AND s6) OR (s6 AND Q_3));
  PgrQ <= (NOT (Q_3 AND s6) AND NOT (Q_2 AND s4 AND s7) AND NOT (Q_1 AND s2 AND s7 AND s5) AND NOT (Q_0 AND s0 AND s7 AND s5 AND s3) AND NOT (s7 AND s5 AND s3 AND s1 AND PleQ_i) AND NOT (s7 AND s5 AND s3 AND s1 AND PeqQ_i));
  PeqQ <= (s7 AND s5 AND PeqQ_i AND s3 AND s1);
  PleQ <= (NOT (PeqQ_i AND s1 AND s3 AND s5 AND s7) AND NOT (PgrQ_i AND s1 AND s5 AND s3 AND s7) AND NOT (s3 AND s5 AND s7 AND s0 AND P_0) AND NOT (s5 AND s7 AND s2 AND P_1) AND NOT (s7 AND s4 AND P_2) AND NOT (s6 AND P_3));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- quad 2-input OR gate
entity n7432 is
  port (
    n1A: in std_logic;
    n1B: in std_logic;
    n2A: in std_logic;
    n2B: in std_logic;
    n3B: in std_logic;
    n3A: in std_logic;
    n4A: in std_logic;
    n4B: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    n1Y: out std_logic;
    n2Y: out std_logic;
    n3Y: out std_logic;
    n4Y: out std_logic);
end n7432;

architecture Behavioral of n7432 is
begin
  n1Y <= (n1A OR n1B);
  n2Y <= (n2A OR n2B);
  n3Y <= (n3A OR n3B);
  n4Y <= (n4A OR n4B);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_D_FF_AS is
  
  port (
    Q: out std_logic;
    notQ: out std_logic;
    Set: in std_logic;
    D: in std_logic;
    C: in std_logic;
    Clr: in std_logic );
end DIG_D_FF_AS;

architecture Behavioral of DIG_D_FF_AS is
   signal state : std_logic := '0';
begin
    process (Set, Clr, C)
    begin
        if (Set='1') then
            state <= NOT('0');
        elsif (Clr='1') then
            state <= '0';
        elsif rising_edge(C) then
            state <= D;
        end if;
    end process;

    Q <= state;
    notQ <= NOT( state );
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- dual D-flip-flop
entity n7474 is
  port (
    n1notSD: in std_logic;
    n1D: in std_logic;
    n1CP: in std_logic;
    n1notRD: in std_logic;
    n2notSD: in std_logic;
    n2D: in std_logic;
    n2CP: in std_logic;
    n2notRD: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    n1Q: out std_logic;
    n1notQ: out std_logic;
    n2Q: out std_logic;
    n2notQ: out std_logic);
end n7474;

architecture Behavioral of n7474 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
begin
  s0 <= NOT n1notSD;
  s1 <= NOT n1notRD;
  s3 <= NOT n2notSD;
  s4 <= NOT n2notRD;
  gate0: entity work.DIG_D_FF_AS
    port map (
      Set => s0,
      D => n1D,
      C => n1CP,
      Clr => s1,
      Q => n1Q,
      notQ => s2);
  gate1: entity work.DIG_D_FF_AS
    port map (
      Set => s3,
      D => n2D,
      C => n2CP,
      Clr => s4,
      Q => n2Q,
      notQ => s5);
  n1notQ <= (s2 OR (NOT n1notSD AND NOT n1notRD));
  n2notQ <= (s5 OR (NOT n2notSD AND NOT n2notRD));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- quad 2-input AND gate
entity n7408 is
  port (
    n1A: in std_logic;
    n1B: in std_logic;
    n2A: in std_logic;
    n2B: in std_logic;
    n3B: in std_logic;
    n3A: in std_logic;
    n4A: in std_logic;
    n4B: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    n1Y: out std_logic;
    n2Y: out std_logic;
    n3Y: out std_logic;
    n4Y: out std_logic);
end n7408;

architecture Behavioral of n7408 is
begin
  n1Y <= (n1A AND n1B);
  n2Y <= (n2A AND n2B);
  n3Y <= (n3A AND n3B);
  n4Y <= (n4A AND n4B);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity fd is
  port (
    decrement_participant: in std_logic;
    enable_counter_sub:    in std_logic;
    reset_counter_sub:     in std_logic;
    turn_on_full:          in std_logic;
    turn_off_full:         in std_logic;
    turn_on_empyt_led:     in std_logic;
    turn_off_empty_led:    in std_logic;
    turn_on_light:         in std_logic;
    turn_off_light:        in std_logic;
    turn_on_air:           in std_logic;
    turn_off_air:          in std_logic;
    reset_flipflops:       in std_logic;
    Clock:                 in std_logic;
    fd_10_ou_mais:        out std_logic;
    fd_cheio:             out std_logic;
    fd_vazio:             out std_logic;
    saida_luz:            out std_logic;
    saida_ar:             out std_logic;
    saida_cheio:          out std_logic;
    saida_vazio:          out std_logic;
    participantes0:       out std_logic;
    participantes1:       out std_logic;
    participantes2:       out std_logic;
    participantes3:       out std_logic
  );
end fd;

architecture Behavioral of fd is
  signal participantes1_temp: std_logic;
  signal participantes0_temp: std_logic;
  signal participantes2_temp: std_logic;
  signal participantes3_temp: std_logic;
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal saida_luz_temp: std_logic;
  signal saida_ar_temp: std_logic;
  signal s3: std_logic;
  signal saida_cheio_temp: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal saida_vazio_temp: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
  signal s11: std_logic;
  signal s12: std_logic;
  signal s13: std_logic;
  signal s14: std_logic;
  signal s15: std_logic;
begin
  gate0: entity work.n7404 -- NOT
    port map (
      n1A => reset_counter_sub,
      n2A => turn_off_air,
      n3A => turn_off_light,
      GND => '0',
      n4A => turn_off_full,
      n5A => turn_off_empty_led,
      n6A => reset_flipflops,
      VCC => '1',
      n1Y => s0,
      n2Y => s8,
      n3Y => s9,
      n4Y => s10,
      n5Y => s11,
      n6Y => s3);
  gate1: entity work.n74191 -- Counter/Subtractor
    port map (
      D1 => '0',
      notCE => '0',
      notUnotD => decrement_participant,
      GND => '0',
      D3 => '0',
      D2 => '0',
      notPL => s0,
      CP => enable_counter_sub,
      D0 => '0',
      VCC => '1',
      Q1 => participantes1_temp,
      Q0 => participantes0_temp,
      Q2 => participantes2_temp,
      Q3 => participantes3_temp);
  gate2: entity work.n7485 -- Comparator_>10
    port map (
      Q_3 => '1',
      PleQ_i => '0',
      PeqQ_i => '1',
      PgrQ_i => '1',
      GND => '0',
      Q_0 => '0',
      P_0 => participantes0_temp,
      Q_1 => '1',
      P_1 => participantes1_temp,
      P_2 => participantes2_temp,
      Q_2 => '0',
      P_3 => participantes3_temp,
      VCC => '1',
      PgrQ => s1,
      PeqQ => s2);
  gate3: entity work.n7485 -- Comparator=15
    port map (
      Q_3 => '1',
      PleQ_i => '0',
      PeqQ_i => '1',
      PgrQ_i => '0',
      GND => '0',
      Q_0 => '1',
      P_0 => participantes0_temp,
      Q_1 => '1',
      P_1 => participantes1_temp,
      P_2 => participantes2_temp,
      Q_2 => '1',
      P_3 => participantes3_temp,
      VCC => '1',
      PeqQ => fd_cheio);
  gate4: entity work.n7485 -- Comparator=0
    port map (
      Q_3 => '0',
      PleQ_i => '0',
      PeqQ_i => '1',
      PgrQ_i => '0',
      GND => '0',
      Q_0 => '0',
      P_0 => participantes0_temp,
      Q_1 => '0',
      P_1 => participantes1_temp,
      P_2 => participantes2_temp,
      Q_2 => '0',
      P_3 => participantes3_temp,
      VCC => '1',
      PeqQ => fd_vazio);
  gate5: entity work.n7432 -- OR
    port map (
      n1A => s2,
      n1B => s1,
      n2A => '0',
      n2B => '0',
      GND => '0',
      n3A => '0',
      n3B => '0',
      n4A => '0',
      n4B => '0',
      VCC => '1',
      n1Y => fd_10_ou_mais);
  gate6: entity work.n7474 -- FLIPFLOP D
    port map (
      n1notRD => s3,
      n1D => saida_cheio_temp,
      n1CP => Clock,
      n1notSD => '1',
      GND => '0',
      n2notSD => '1',
      n2CP => Clock,
      n2D => saida_ar_temp,
      n2notRD => s3,
      VCC => '1',
      n1Q => s4,
      n2Q => s5);
  gate7: entity work.n7474 -- FLIPFLOP D
    port map (
      n1notRD => s3,
      n1D => saida_vazio_temp,
      n1CP => Clock,
      n1notSD => '1',
      GND => '0',
      n2notSD => '1',
      n2CP => Clock,
      n2D => saida_luz_temp,
      n2notRD => s3,
      VCC => '1',
      n1Q => s6,
      n2Q => s7);
  gate8: entity work.n7432 -- OR
    port map (
      n1A => turn_on_full,
      n1B => s12,
      n2A => turn_on_empyt_led,
      n2B => s13,
      GND => '0',
      n3A => s14,
      n3B => turn_on_light,
      n4A => s15,
      n4B => turn_on_air,
      VCC => '1',
      n1Y => saida_cheio_temp,
      n2Y => saida_vazio_temp,
      n3Y => saida_luz_temp,
      n4Y => saida_ar_temp);
  gate9: entity work.n7408 -- AND
    port map (
      n1A => s4,
      n1B => s10,
      n2A => s5,
      n2B => s8,
      GND => '0',
      n3A => s6,
      n3B => s11,
      n4A => s9,
      n4B => s7,
      VCC => '1',
      n1Y => s12,
      n2Y => s15,
      n3Y => s13,
      n4Y => s14);
  saida_luz <= saida_luz_temp;
  saida_ar <= saida_ar_temp;
  saida_cheio <= saida_cheio_temp;
  saida_vazio <= saida_vazio_temp;
  participantes0 <= participantes0_temp;
  participantes1 <= participantes1_temp;
  participantes2 <= participantes2_temp;
  participantes3 <= participantes3_temp;
end Behavioral;